define MCS51_HELP

  MCS51 extras:

   clean   : includes original clean and removes Keil temporaries
   inline  : compiles using the University of Utah CIL inliner

endef

HELP += $(MCS51_HELP)

NCC = ncc

SDCC = sdcc
# hmm.. should be --model-large, but that seems to fail
# --std-sdcc99 allows inline
SDCC_CFLAGS = -mmcs51 --model-large --no-c-code-in-asm --std-sdcc99

BUILDDIR = build/$(PLATFORM)
MAIN_EXE = $(BUILDDIR)/APP
MAIN_SREC = $(BUILDDIR)/main.srec
MAIN_IHEX = $(BUILDDIR)/app.hex
APP_C = $(BUILDDIR)/app.c
APP_C_TMP = $(BUILDDIR)/app.orig.c
INSTALL_SREC = $(MAIN_SREC).out$(if $(NODEID),-$(NODEID),)
VOLUMEFILE = volumes-at45db.xml

CFLAGS += -I$(CONTRIBROOT)/diku/mcs51/tos/platforms/$(PLATFORM)

NESC_FLAGS += -conly
PFLAGS += -Wall -Wshadow -DDEF_TOS_AM_GROUP=$(DEFAULT_LOCAL_GROUP) $(NESC_FLAGS)
PFLAGS += -target=$(PLATFORM) -fnesc-cfile=$(APP_C) -board=$(SENSORBOARD)
ifdef MSG_SIZE
PFLAGS += -DTOSH_DATA_LENGTH=$(MSG_SIZE)
endif

BUILDLESS_DEPS += bytes

MCS51_MAKE_PATH = $(CONTRIBROOT)/diku/mcs51/support/make

ifndef BUILD_DEPS
  ifeq ($(filter $(BUILDLESS_DEPS),$(GOALS)),)
    BUILD_DEPS = exe
  endif
endif

ifndef MCS51_COMPILER
	MCS51_COMPILER=keil
endif

ifndef MCS51_IAR_PATH
	MCS51_IAR_PATH=Program Files/IAR Systems/Embedded Workbench 5.0 Evaluation version/common/bin
endif

OSNAME = $(shell uname)
ifeq ($(findstring CYGWIN,$(OSNAME)),CYGWIN)
	MCS51_IAR_PATH:=/cygdrive/c/$(MCS51_IAR_PATH)
else
	MCS51_IAR_PATH:=C:$(MCS51_IAR_PATH)
	ifndef MCS51_WINE_IAR_PATH
	       MCS51_WINE_IAR_PATH := $(HOME)/.wine.iar
	endif
	ifndef MCS51_WINE_KEIL_PATH
	       MCS51_WINE_KEIL_PATH := $(HOME)/.wine.keil
	endif
        MCS51_WINE_IAR=env WINEPREFIX=$(MCS51_WINE_IAR_PATH) LC_ALL=en_US wine
        MCS51_WINE_KEIL=env WINEPREFIX=$(MCS51_WINE_KEIL_PATH) LC_ALL=en_US wine cmd /c
endif


#####
# $(APP_C) moves to app.preMangle.c
# mangles to app.c

tosimage: ihex FORCE
	@:

ihex: exe FORCE
	@:


#######
# Common ncc rules

exe: ncc $(POST_NCC_DEPS) mangle $(MCS51_COMPILER) FORCE

.PHONY: ncc
ncc: builddir $(BUILD_EXTRA_DEPS)
	@echo "    compiling $(COMPONENT) to a $(PLATFORM) binary"
	$(NCC) -S $(OPTFLAGS) $(CFLAGS) $(PFLAGS) $(WIRING_CHECK_FLAGS) $(COMPONENT).nc 2>&1 | \
		grep -v "attribute directive ignored"
ifdef WIRING_CHECK_FILE
	@nescc-wiring $(WIRING_CHECK_FILE)
endif
	@echo "    compiled $(COMPONENT) to $(APP_C)"

.PHONY: mangle
mangle: ncc
	mv $(APP_C) $(BUILDDIR)/app.preMangle.c
	perl -w $(MCS51_MAKE_PATH)/mcs51/mangleAppC.pl --$(MCS51_COMPILER) --file=$(BUILDDIR)/app.preMangle.c > $(APP_C)

#######
# IAR rules

iar: mangle builddir
	cp $(MCS51_MAKE_PATH)/mcs51/iar* $(BUILDDIR)
	cd $(BUILDDIR) && $(MCS51_WINE_IAR) "$(MCS51_IAR_PATH)/iarbuild.exe" iar-app-project.ewp -build Debug
	@grep "SEGMENTS IN ADDRESS ORDER" -B 3 -A 20 $(BUILDDIR)/Debug/List/iar-app-project.map
	@grep "END OF CROSS REFERENCE" -A 8 $(BUILDDIR)/Debug/List/iar-app-project.map | grep memory 
	cp $(BUILDDIR)/Debug/Exe/iar-app-project.a51 $(BUILDDIR)/app.hex

#######
# SDCC rules

.PHONY: sdcc
sdcc: mangle
	$(SDCC) $(SDCC_CFLAGS) $(APP_C) -o$(BUILDDIR)/app  
	packihx $(BUILDDIR)/app > $(BUILDDIR)/app.hex
	@echo "Segment sizes"
	@grep -A 1 "OSEG" $(BUILDDIR)/app.sym
	@grep -A 1 "SSEG" $(BUILDDIR)/app.sym
	@grep -A 1 "DSEG" $(BUILDDIR)/app.sym
	@grep -A 1 "CSEG" $(BUILDDIR)/app.sym
	@grep -A 1 "XSEG" $(BUILDDIR)/app.sym
	@grep -A 1 "CONST" $(BUILDDIR)/app.sym
	@grep -A 1 "HOME" $(BUILDDIR)/app.sym
	@grep -A 1 "GSFINAL" $(BUILDDIR)/app.sym
	@echo "Memory usage"
	@grep "Stack starts at" $(BUILDDIR)/app.mem
	@grep "Other memory" -A 5 $(BUILDDIR)/app.mem

#######
# Keil rules
# Build to .hex using $(MCS51_KEIL_SCRIPT) from

keil: mangle $(BUILDDIR)/startup.OBJ $(BUILDDIR)/$(KEIL_BAT_SCRIPT)
	cd $(BUILDDIR) $(OSTYPE) &&   $(MCS51_WINE_KEIL) ./$(MCS51_KEIL_SCRIPT)
	@bash -c "if [ -f $(COMPONENT).s ]; then mv $(COMPONENT).s build/$(PLATFORM)/; fi"
	@echo "    compiled $(COMPONENT) to a $(PLATFORM) binary"
	@echo "Code size of app.o"
	@grep -A 7 "MODULE INFORMATION:   STATIC OVERLAYABLE" $(BUILDDIR)/app.lst
	@echo "Total sizes"
	@grep "Program Size:" $(BUILDDIR)/app.map

.PHONY: $(BUILDDIR)/$(KEIL_BAT_SCRIPT)
$(BUILDDIR)/$(KEIL_BAT_SCRIPT):
	cp $(MCS51_MAKE_PATH)/mcs51/$(MCS51_KEIL_SCRIPT) $(BUILDDIR)

$(BUILDDIR)/startup.OBJ: $(MCS51_MAKE_PATH)/mcs51/startup.a51
	cp $(MCS51_MAKE_PATH)/mcs51/startup.a51 $(BUILDDIR)
	cp $(MCS51_MAKE_PATH)/mcs51/startup.bat $(BUILDDIR)
	cd $(BUILDDIR) && $(MCS51_WINE_KEIL) ./startup.bat


builddir: FORCE
	mkdir -p $(BUILDDIR)
